# /etc/nginx/sites-available/public-form-scratch.conf

# -----------------------------------------------------
# HTTP (ポート80) 用サーバーブロック: HTTPS へリダイレクト
# Certbot が自動生成する一般的なリダイレクトブロックの形式
# -----------------------------------------------------
server {
    listen 80; # HTTP ポートを待ち受ける
    listen [::]:80;
    server_name contact2.cypass.net; # あなたのドメイン名

    # Certbot の認証用パス (証明書取得時に必要)
    location /.well-known/acme-challenge/ {
        root /var/www/html/public-form-scratch/frontend; # Certbotがファイルを作成する場所
    }

    # 全てのHTTPリクエストをHTTPSにリダイレクト
    return 301 https://$host$request_uri;
}

# -----------------------------------------------------
# HTTPS (ポート443) 用サーバーブロック: アプリケーションを配信
# Certbot が自動で更新した内容と、あなたの元々のアプリケーション設定を融合
# -----------------------------------------------------
server {
    listen 443 ssl http2; # HTTPS ポートを待ち受ける
    listen [::]:443 ssl http2; # IPv6用

    server_name contact2.cypass.net; # あなたのドメイン名

    # --- SSL/TLS 証明書の設定 (Certbotによって生成されたパス) ---
    ssl_certificate /etc/letsencrypt/live/contact2.cypass.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/contact2.cypass.net/privkey.pem; # managed by Certbot

    # Certbotが提供するSSL設定の推奨事項
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # --- セキュリティヘッダー (あなたの元々の設定) ---
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # HSTS

    # 静的ファイルの配信
    root /var/www/html/public-form-scratch/frontend; # frontendディレクトリのパス
    index index.html;

    # Node.jsバックエンドへのリバースプロキシ設定
    location /api/ {
        proxy_pass http://localhost:3000; # Node.jsサーバーがリッスンするポート
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # ルート (/) へのアクセスや、その他の静的ファイルの処理
    location / {
        try_files $uri $uri/ =404;
    }

    # エラーログとアクセスログのパス
    error_log /var/log/nginx/contact2.cypass.net_error.log;
    access_log /var/log/nginx/contact2.cypass.net_access.log;
}